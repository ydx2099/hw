#### 1.需求传递
- 一线传递原始需求给研发部门
- 项目owner（PO）评估需求工作量和人力，制定版本计划
- 原始需求文档传递给SE分析

#### 2.需求分析&拆解
- SE分析原始需求，制定新的需求文档
- SE将各大需求拆解成小的需求点，通常是按模块、功能进行划分
- 需求文档要写清楚业务流程、表定义、新增数据类型和长度、界面展示（原型图）、提示信息、异常处理等等。接口有另外的接口文档，需详细定义入参、返回、异常信息、权限、流控等
- 需求拆解完成后，将需求录入研发桌面（可理解为是一个需求管理系统）
- 项目经理在研发桌面分配开发、测试任务，可以指派也可以认领

#### 3.版本开工会
- 项目经理制定详细版本计划，包括总体的工作量、人员安排、和下面提到的各个环节的完成时间点
- SE、开发、测试、PO全员参与

#### 4.需求文档评审&修改
- 项目经理、开发、测试人员提前熟悉需求，评审需求文档，将意见提交版本库
- SE根据提交的意见修改需求文档

#### 5.需求澄清
- 项目经理组织需求澄清会，开发、测试全员参与，SE讲解需求
- 会上有问题可以继续提意见
- 需求文档最终确认之后，进入开发、测试阶段

#### 6.开发人员编写详细设计文档
- 开发人员分析各自需求，编写详细设计文档（也叫story）
- 详细设计文档包含：需求背景、业务流程、界面变更、关键代码逻辑、数据库设计、验收标准等
- 原则上详细设计文档没有写好不开始编码

#### 7.测试人员编写测试方案
- 测试方案尽量覆盖所有影响范围
- 测试方案通常采用思维导图形式
- 与步骤6同步进行

#### 8.详细设计文档、测试方案评审
- 测试方案编写完成后，测试团队内部组织评审
- 详细设计文档编写完成后，开发团队内部组织评审
- 项目经理统一组织开发、测试、SE开会评审

#### 9.编码&测试用例编写
- 开发人员编码
- 测试人员编写用例文档

#### 10.代码评审
- 如果是结对开发，可以随时互相评审代码
- 开发人员确认代码编写完成后，发起代码评审
- 根据代码评审意见修改完成之后，需要再评审，直到不能评审出问题
- 代码静态检查：开发人员提交代码前使用Checkstyle、PMD、Findbugs工具检查。代码提交之后，每天凌晨会有任务扫描SVN的增量代码执行静态检查
- 代码提交规范：代码提交到SVN服务器的时候有控制，必须写上相应格式的注释。这个注释也是方便代码评审人员知道每一次代码提交的原因是什么

#### 11.测试用例评审
- 测试团队内部评审
- 发给对应开发人员评审
- 根据评审意见修改

#### 12.开发自验
- 自验&根据测试用例验证

#### 13.敏捷测试
- 全部需求开发完成后，项目发布到敏捷测试环境
- 测试人员在敏捷测试环境测试，提单到问题单管理系统DTS
- 开发人员改单，改完后通知测试进行问题单验证回归

#### 14.SDV测试&自动化测试
- SDV测试通常有三轮，每一轮测出的问题需要在下一轮测试前修改完成
- 原则上，最后一轮测试，不能测出任何bug
- 自动化测试的主要目的是保证系统核心功能的正常

#### 15.头脑风暴
- 针对在测试中出现问题较多的需求，项目经理组织相关开发、测试人员进行头脑风暴，目的是发现潜在问题

#### 16.压力测试
- 针对可能出现较大线上压力的业务，做压力测试

#### 17.SIT集成测试
- 涉及到其它部件的需求，需要在发布前和其它部件联调，主要是接口类需求

#### 18.版本发布
- 从研发部门将版本发布到一线团队，最终是否发布到线上由一线团队决定

#### 19.版本总结会
- 版本整体质量数据：代码量、bug数量、测试用例质量等
- 总结版本过程中的优缺点
- 需要改进的点，指定责任人

#### 20.AAR会议
- 针对版本中出现的重大问题，需要开AAR会议
- AAR会议主要讨论问题是如何发生的，今后如何解决

#### 21.总结文档编写
- 在下一个版本开始之前会有几天空闲时间，可以用来编写总结文档
- 总结文档也可以是任意时候写

#### 22.最终发布前UAT测试
- UAT测试是一线（海外）人员在正式发布前做的测试，更接近客户的真实需求和使用场景，通常有客户方人员参与测试，如发现重大问题需要发补丁解决，非重大问题在后续版本解决
